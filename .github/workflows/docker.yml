name: docker-build

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  FOLDER: template
  OLS_VERSION: 1.8.1

jobs:
  build_push:
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        # PHP_VERSION: [lsphp74, lsphp80, lsphp81, lsphp82]
        PHP_VERSION: [lsphp74, lsphp81, lsphp82]
        # NOTE: We can't use lsphp83 since lsphp83 missing lsphp83-redis and lsphp83-memcache extension for ARM64. Check from this link whether they are available or not
        # https://rpms.litespeedtech.com/debian/dists/jammy/main/binary-arm64/Packages
        # PHP_VERSION: [lsphp83]
        TAG: [latest]
    steps:
      - uses: actions/checkout@v2
      # - name: Docker build and push
      #   run: |
      #     echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      #     cd ${{ env.FOLDER }}
      #     bash build.sh --ols ${{ env.OLS_VERSION }} --php ${{ matrix.PHP_VERSION }} --tag "${{ matrix.TAG }}" --push
      #   env: 
      #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        # id: buildx
        uses: docker/setup-buildx-action@v3
          # with:
          #   install: true
      # Login to Docker registry
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Multi architecture build and push

      - name: Build & Push Image
        run: |
          cd ${{ env.FOLDER }}
          # bash build.sh --ols ${{ env.OLS_VERSION }} --php ${{ matrix.PHP_VERSION }} --tag "${{ matrix.TAG }}" --push
          bash build.sh --ols ${{ env.OLS_VERSION }} --php ${{ matrix.PHP_VERSION }} --push
      
  